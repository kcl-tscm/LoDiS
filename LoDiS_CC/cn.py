from asap3 import FullNeighborList
from asap3.analysis import CoordinationNumbers
from ase import Atoms
import numpy as np


"""(Armand)
ACTUAL CNMAX FOUND IN THIS PARTICLE WAS 14, 12 was used previously,
not sure why.
"""
def get_coord_number(Trajectory, r_cut_cn):
    
    """ Robert
    
    Trajectory: Tensor of the xyz file for a given frame of a full trajectory
    after being read by the "ase.io.read" routine.
    
    r_cut_cn: Predefined variable (in Angstrom) which determines how far from 
    a given atom one may search before terminating their search for a neighbour.
    
    Returns the (generalised) coordination number for each atom in the system.
    
    cnmax is a globally defined variable in a higher level script such as 
    "Descriptor_Draft.py"
    """

	

	#checks the elemental composition, displays them in elements#

    for frame, atoms in enumerate(Trajectory):
        atoms.set_cell([[100, 0, 0], [0, 100, 0], [0, 0, 100]])
        cn = []
        gcn =[]
		#atgcn = []
        nl = FullNeighborList(r_cut_cn, atoms = atoms)
        for atom in np.arange(len(atoms)):
            distance_atom = []
            indices, positions, dist = nl.get_neighbors(atom)
            distance_atom.extend(np.sqrt(dist))
            cn_atom = len(distance_atom)
            cn.append(cn_atom)
            gcn.append(sum(cn)/cnmax)
    return cn, gcn


"""(Matteo)
atop gcn: matrix with 0 and 1 (neigh. or no neigh.) times cn
bridge gcn: matrix with i+j. if i+j=2 convert to 1. Then multiply by cn. Use cosine function to normalize.
in pdf: use gaussian convolution.
"""


"""(Armand)
Running a cn using asap3 to compare results
"""


def get_coord_number_asap(Trajectory, r_cut_cn):
    
    """ Robert
    
    Calls the asap3 environment to explicitly calculate the cn for a given atom
    in a trajectory frame. 
    
    I would like to know what is going on under the hood for the source code in this
    script.
    """
    for frame, atoms in enumerate(Trajectory):
        atoms.set_cell([[100, 0, 0], [0, 100, 0], [0, 0, 100]])
        cn_atom = CoordinationNumbers(atoms,r_cut_cn)
    return cn_atom


def cn_generator(Trajectory, r_cut_cn):
    
    """ Robert
    
    Trajectory: Single frame xyz coordinates for the system after being read
    by the ase read function. This will generally be generated by the 
    "Movie_Read.py" module before being disseminated to worker functions.
    
    r_cut_cn: Real valued number, in Angstrom. Defines how far one may search
    from a given atom in search of a neighbour.
    """
        

    cn=[]
    for i, atoms in enumerate(Trajectory):
            atoms.set_cell([[100, 0, 0], [0, 100, 0], [0, 0, 100]])
            #cn=[]
            for j in np.arange(len(atoms)):
                nl = FullNeighborList(r_cut_cn, atoms=atoms)
                distancej=[]
                indices, positions, distances = nl.get_neighbors(j)
                distancej.extend(distances**0.5)
                cnj=len(distancej)
                cn.append(cnj)
    return(cn)
